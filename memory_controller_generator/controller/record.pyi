"""
This stub file is required to get working auto-complete on the attributes of a record. Since nMigen uses dynamic
attributes when building records, an IDE cannot determine these attributes with simple static analysis. Instead the
attributes are defined as instance variables here, tricking auto-complete into showing them.
"""
from amaranth import Signal, Record


class MemoryRequestRecord(Record):
    def __init__(self, addr_width: int, data_width: int):
        self.valid: Signal = ...
        self.ready: Signal = ...
        self.addr: Signal = ...
        self.write_en: Signal = ...
        self.write_data: Signal = ...
        self.debug_ignore: Signal = ...

    def ports(self) -> [Signal]: ...


class MemoryRequestWithPartialRecord(Record):
    def __init__(self, addr_width: int, data_width: int, granularity: int):
        self.valid: Signal = ...
        self.ready: Signal = ...
        self.addr: Signal = ...
        self.write_en: Signal = ...
        self.write_data: Signal = ...
        self.write_mask: Signal = ...

    def ports(self) -> [Signal]: ...


class MemoryResponseRecord(Record):
    def __init__(self, data_width: int):
        self.valid: Signal = ...
        self.ready: Signal = ...
        self.read_data: Signal = ...
        self.error: Signal = ...
        self.uncorrectable_error: Signal = ...

    def ports(self) -> [Signal]: ...


class SRAMInterfaceRecord(Record):
    def __init__(self, addr_width: int, data_width: int):
        self.clk_en: Signal = ...
        self.addr: Signal = ...
        self.write_en: Signal = ...
        self.write_data: Signal = ...
        self.read_data: Signal = ...

    def ports(self) -> [Signal]: ...


class DebugInfoRecord(Record):
    def __init__(self, total_width: int):
        self.error: Signal = ...
        self.uncorrectable_error: Signal = ...
        self.flips: Signal = ...
        self.ignore: Signal = ...

    def ports(self) -> [Signal]: ...